@model HR.Web.ViewModels.SalaryStructureVm

@{
    var fname = string.Empty;
    if (!string.IsNullOrWhiteSpace(Request.QueryString["fname"]))
    {
        fname = Request.QueryString["fname"];
    }

}

@section Styles{

    @*<style type="text/css">
            .table tbody td:nth-child(5) {
                width: 170px;
            }

            .table tbody td:nth-child(6) {
                width: 170px;
            }

            .table tbody td:nth-child(7) {
                width: 120px;
                /*direction: rtl;*/
            }

            .table tbody td:nth-child(8) {
                width: 120px;
                /*direction: rtl;*/
            }

            .table tfoot {
                /*display:block;*/
            }

            currencyCss {
                direction: rtl;
            }

            .table tfoot {
                display: table-footer-group;
            }
        </style>*@
    <style>
        .table tfoot {
            display: table-footer-group;
        }
    </style>
}
<style>
    .no-wrap {
        white-space: nowrap;
    }
</style>
<div class="page">
    @using (Html.BeginForm("SalaryStructure", "Payroll", FormMethod.Post, new { id = "frmSalary", name = "frmSalary" }))
    {
        <div class="row">
            <div class="col-md-12">
                <div class="panel panel-default panel-hovered panel-stacked mb10">
                    <div class="panel-heading">
                        Salary Structure
                    </div>
                    <div class="panel-body">
                        <div class="row css5">
                            <label class="col-md-2 control-label">
                                <span class="pull-right">Code</span>
                            </label>
                            <div class="col-md-4">
                                @Html.HiddenFor(x => x.structureHeader.StructureID)
                                @Html.TextBoxFor(x => x.structureHeader.Code, new { @class = "form-control" })
                            </div>
                            <label class="col-md-2 control-label">
                                <span class="pull-right">Effective Date</span>
                            </label>
                            <div class="col-md-4">
                                <div class="input-group date" id="EffectiveDate">
                                    @Html.TextBoxFor(x => x.structureHeader.EffectiveDate, "{0:dd/MM/yyyy}", new { @class = "form-control dtCss" })
                                    <span class="input-group-addon">
                                        <i class="ion ion-calendar"></i>
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="row css5">
                            <label class="col-md-2 control-label">
                                <span class="pull-right">Remarks</span>
                            </label>
                            <div class="col-md-4">
                                @Html.TextAreaFor(x => x.structureHeader.Remarks, new { @class = "form-control" })
                            </div>

                            <label class="col-md-2 control-label">
                                <span class="pull-right">Is Active</span>
                            </label>
                            <div class="col-md-4" style="margin-top:10px;">
                                @Html.CheckBoxFor(x => x.structureHeader.IsActive, new { @class = "form-control" })
                            </div>
                        </div>
                        <br />
                        <br />
                        <div class="clearfix">
                            @* <ul class="nav nav-tabs">
                                    <li class="active"><a href="#tab-home" data-toggle="tab" aria-expanded="true">Salary Rules</a></li>
                                </ul>
                                <div class="tab-content">
                                    <div class="tab-pane active" id="tab-home">*@
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="table-responsive">
                                        <table class="table table-condensed table-bordered">
                                            <thead>
                                                <tr>
                                                    <th></th>
                                                    <th>Code</th>
                                                    <th>Description</th>
                                                    <th class="no-wrap">Contribution Register</th>
                                                    <th>Computation</th>
                                                    <th>Amount</th>
                                                    <th>Total</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @{

                                                    var ContributionRegister = SelectListItemHelper.ContributionRegister();
                                                    var Computation = SelectListItemHelper.Computation();
                                                }
                                                @for (int i = 0; i < Model.structureDetail.Count; i++)
                                                {
                                                    @Html.HiddenFor(x => x.structureDetail[i].StructureDetailID)
                                                    <tr class="trCss">
                                                        <td>
                                                            @Html.CheckBoxFor(x => x.structureDetail[i].IsActive, new { @class = "form-control chkCss", data_index = i })
                                                        </td>
                                                        @Html.HiddenFor(x => x.structureDetail[i].Code)
                                                        <td>@Html.DisplayFor(x => x.structureDetail[i].Code)</td>
                                                        @Html.HiddenFor(x => x.structureDetail[i].Description)
                                                        <td style="width:250px;">@Html.DisplayFor(x => x.structureDetail[i].Description)</td>

                                                        <td>
                                                            @Html.DropDownListFor(x => x.structureDetail[i].RegisterCode,
                                                                    new SelectList(ContributionRegister, "Value", "Text", Model.structureDetail[i].RegisterCode), "", new { @class = "form-control input-sm" })
                                                        </td>
                                                        <td>
                                                            @Html.DropDownListFor(x => x.structureDetail[i].ComputationCode,
                                                                    new SelectList(Computation, "Value", "Text", Model.structureDetail[i].ComputationCode), "", new { @class = "form-control input-sm", onchange = "calculateTotal()" })
                                                        </td>
                                                        <td>
                                                            @Html.TextBoxFor(x => x.structureDetail[i].Amount, new { @class = "form-control input-sm", onblur = "validateAmount(this," + i + ")" })
                                                        </td>
                                                        <td>
                                                            @Html.TextBoxFor(x => x.structureDetail[i].Total, new { @class = "form-control input-sm", @readonly = "readonly" })
                                                        </td>


                                                    </tr>

                                                }

                                            </tbody>
                                            <tfoot>
                                                <tr>
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                    <td style="text-align:right;">NETT</td>
                                                    <td>@Html.TextBoxFor(x => x.structureHeader.NetAmount, new { @class = "form-control input-sm", @readonly = "readonly" })</td>
                                                </tr>
                                            </tfoot>
                                        </table>
                                    </div>

                                </div>
                            </div>
                            @*</div>
                                </div>*@
                        </div>
                    </div>
                </div>
            </div>
        </div>
                                                    }
    <div class="row">
        <div class="col-md-12">
            <button class="btn btn-primary btn-sm" type="button" onclick="SaveStructure()"><i class="fa fa-floppy-o" aria-hidden="true"></i>Save</button>
        </div>
    </div>
</div>
@section Scripts{
    <script type="text/javascript">
        @{
            <text>
        var percentage = '@UTILITY.PERCENTAGE';
        var count= @Model.structureDetail.Count;

        </text>
        }

        var value=true;
        function showHide(value){

            for (var index = 1; index <count; index++)
            {
                if(!value){
                    $('#structureDetail_' + index + '__ComputationCode').attr('disabled', 'disabled');
                    //$('#structureDetail_' + index + '__IsActive').attr('disabled', 'disabled');
                    $('#structureDetail_' + index + '__RegisterCode').attr('disabled', 'disabled');
                    $('#structureDetail_' + index + '__Amount').attr('disabled', 'disabled');
                }
                else{
                    $('#structureDetail_' + index + '__ComputationCode').removeAttr('disabled');
                    //$('#structureDetail_' + index + '__IsActive').removeAttr('disabled');
                    $('#structureDetail_' + index + '__RegisterCode').removeAttr('disabled');
                    $('#structureDetail_' + index + '__Amount').removeAttr('disabled');
                }
            }

        }

        $(function () {
            @*@if(Model.structureHeader.StructureID != 0)
            {
                <text>
            debugger;
            var dt = moment('@Model.structureHeader.EffectiveDate.Value.ToString("MM/dd/yyyy")', 'MM/DD/YYYY').format(dateFormat);
            debugger;
                $('#structureHeader_EffectiveDate').val(moment('@Model.structureHeader.EffectiveDate.Value.ToString("MM/dd/yyyy")', 'MM/DD/YYYY').format(dateFormat));
                </text>
            }*@
            $('#li_PayRollConfig').addClass('open');
            $('#li_SalaryStructures').addClass('active');
            showHide();
            var date = new Date();
            $('.dtCss').datetimepicker({
                icons: {
                    time: 'fa fa-clock-o',
                    date: 'fa fa-calendar',
                    up: 'fa fa-arrow-up',
                    down: 'fa fa-arrow-down',
                    previous: 'fa fa-arrow-left',
                    next: 'fa fa-arrow-right',

                },
                format: dateFormat,
                minDate: moment(date)
            });

            $('#frmSalary').validate({
                rules: {
                    'structureHeader.Code': {
                        required: true
                    },
                    'structureHeader.EffectiveDate': {
                        required: true
                    },
                    'structureHeader.Remarks': {
                        required: true
                    }
                }
            });
            $(".chkCss").trigger('ifChanged');

        });

        function SaveStructure() {
            if ($('#frmSalary').valid())
                $('#frmSalary').submit();
        }


        $('.chkCss').on("ifChanged", function (event) {
            var temp = this;
            var index=$(this).data('index');
            debugger;
            if(index == 0){
                if ($('#structureDetail_0__IsActive').prop('checked')) {
                    //showHide(true);
                }
                else {

                    // showHide(false);
                }
            }
            if($('#'+this.id).prop('checked')){

                $('#structureDetail_' + index + '__ComputationCode').attr('required','required');
                $('#structureDetail_' + index + '__RegisterCode').attr('required','required');
                $('#structureDetail_' + index + '__Amount').attr('required','required');

                $('#structureDetail_' + index + '__ComputationCode').removeAttr('disabled');
                $('#structureDetail_' + index + '__RegisterCode').removeAttr('disabled');
                $('#structureDetail_' + index + '__Amount').removeAttr('disabled');
            }
            else{
                $('#structureDetail_' + index + '__ComputationCode').attr('disabled', 'disabled');
                $('#structureDetail_' + index + '__RegisterCode').attr('disabled', 'disabled');
                $('#structureDetail_' + index + '__Amount').attr('disabled', 'disabled');

                $('#structureDetail_' + index + '__ComputationCode').removeAttr('required');
                $('#structureDetail_' + index + '__RegisterCode').removeAttr('required');
                $('#structureDetail_' + index + '__Amount').removeAttr('required');
            }

        });

        /* calculation */

        function calculateTotal(){
            var obj={};
            validateAmount(obj,0);
        }
        function validateAmount(el, index) {

            var rowCount=$('.trCss').length;
            var netAmount=0;
            for(var i=0; i<rowCount;i++){
                var basicAmount=$('#structureDetail_' + 0 + '__Amount').val();
                if(index == 0 && basicAmount!=""){
                    basicAmount
                    basicAmount =parseFloat(basicAmount).toFixed(2);
                    $('#structureDetail_' + 0 + '__Total').val(basicAmount);
                }

                if(!$('#structureDetail_' + i + '__IsActive').prop('checked'))
                    continue;
                var total = $('#structureDetail_' + i + '__Amount').val();
                if(total!="")
                    total=parseFloat(total).toFixed(2);
                var ComputationCode = $('#structureDetail_' + i + '__ComputationCode').val();
                if (ComputationCode == percentage) {

                    if(total>100){
                        $('#structureDetail_' + i + '__Amount').val('');
                        swal({
                            title: "Alert!",
                            text: "Percentage value should be less than 100",
                            type: "warning"
                        });
                        return;
                    }
                    var grandTotal=(basicAmount* total)/100;
                    grandTotal=parseFloat(grandTotal).toFixed(2);
                    $('#structureDetail_' + i + '__Total').val(grandTotal);
                }else{
                    $('#structureDetail_' + i + '__Total').val(total);
                }

                /* Calculate Nett amount*/
                var currentValue=$('#structureDetail_' + i + '__Total').val();
                if(currentValue!="" && currentValue!=null){
                    netAmount = parseFloat(netAmount)+ parseFloat(currentValue);
                    netAmount=netAmount.toFixed(2);
                    $('#structureHeader_NetAmount').val(netAmount);
                }
            }

        }
    </script>
}