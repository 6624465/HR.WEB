@model HR.Web.ViewModels.SalaryStructureVm

@section Styles{
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.0/css/select2.min.css">
    <style>
        .table tfoot {
            display: table-footer-group;
        }

        .no-wrap {
            white-space: nowrap;
        }

        span.error {
            outline: none;
            border-bottom-color: #ff0000 !important;
        }

        .selection > span{
            border-radius: 0px !important;
        }
    </style>
}

<div class="page">
    @using (Html.BeginForm("SalaryStructure", "Payroll", FormMethod.Post, new { id = "frmSalary", name = "frmSalary" }))
    {
        <div class="row">
            <div class="col-md-12">
                <div class="panel panel-default panel-hovered panel-stacked mb10">
                    <div class="panel-heading">
                        Salary Structure
                    </div>
                    <div class="panel-body">
                        <div class="row css5">
                            @if (ViewData["RoleCode"].ToString() == UTILITY.ROLE_SUPERADMIN)
                            {
                                <label class="col-md-2 control-label">
                                    <span class="pull-right">Branch</span>
                                </label>
                                <div class="col-md-4">

                                    @Html.DropDownListFor(x => x.structureHeader.BranchId, SelectListItemHelper.Branches(), "--Select--",
                                new { @class = "form-control input-sm", onchange = "getContribution(this)" })
                                </div>
                            }
                            else
                            {
                                @Html.HiddenFor(x => x.structureHeader.BranchId)
                            }
                        </div>
                        <div class="row css5">

                            <label class="col-md-2 control-label">
                                <span class="pull-right">Code</span>
                            </label>
                            <div class="col-md-3">
                                @Html.HiddenFor(x => x.structureHeader.StructureID)
                                @Html.HiddenFor(x => x.structureHeader.Code)
                                @Html.TextBoxFor(x => x.structureHeader.Code, new { @class = "form-control input-sm", disabled = "disabled" })
                            </div>
                            <label class="col-md-2 control-label">
                                <span class="pull-right">Employee</span>
                            </label>
                            <div class="col-md-3">
                                @Html.DropDownListFor(x => x.structureHeader.EmployeeId,
                               SelectListItemHelper.EmployeeList(Model.structureHeader.BranchId.Value), "--Select--",
                                new { @class = "form-control input-sm" })
                            </div>
                        </div>

                        <div class="row css5">
                            <label class="col-md-2 control-label">
                                <span class="pull-right">Description</span>
                            </label>
                            <div class="col-md-3">
                                @Html.TextBoxFor(x => x.structureHeader.Description, new { @class = "form-control input-sm" })
                            </div>
                            <label class="col-md-2 control-label">
                                <span class="pull-right">Effective Date</span>
                            </label>
                            <div class="col-md-3">
                                <div class="input-group date dtCss" id="EffectiveDate">
                                    @Html.TextBoxFor(x => x.structureHeader.EffectiveDate,
                                   new { @class = "form-control dtCssTxt input-sm" })
                                    <span class="input-group-addon">
                                        <i class="ion ion-calendar"></i>
                                    </span>
                                </div>
                            </div>

                        </div>

                        <div class="row css5">
                            <label class="col-md-2 control-label">
                                <span class="pull-right">Remarks</span>
                            </label>
                            <div class="col-md-3">
                                @Html.TextAreaFor(x => x.structureHeader.Remarks, new { @class = "form-control input-sm" })
                            </div>
                        </div>
                        <br />
                        <br />
                        <div class="clearfix">
                            <h4><b>SALARY PAYMENTS</b></h4>
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="table-responsive">
                                        <table class="table table-condensed table-bordered">
                                            <thead>
                                                <tr>
                                                    <th></th>
                                                    <th>Code</th>
                                                    <th>Description</th>
                                                    <th class="no-wrap">Variable Pay</th>
                                                    <th>Computation</th>
                                                    <th>Amount</th>
                                                    <th>Total</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @{

                                                    var ContributionRegister = SelectListItemHelper.ContributionRegister();
                                                    var Computation = SelectListItemHelper.Computation();

                                                }
                                                @for (int i = 0; i < Model.structureSalaryPaymentDetail.Count; i++)
                                                {
                                                    @Html.HiddenFor(x => x.structureSalaryPaymentDetail[i].PaymentType)
                                                    //@Html.HiddenFor(x => x.structureSalaryPaymentDetail[i].RegisterCode)
                                                    @Html.HiddenFor(x => x.structureSalaryPaymentDetail[i].StructureDetailID)
                                                    <tr class="trCssSalaryPayment">
                                                        <td>
                                                            @Html.CheckBoxFor(x => x.structureSalaryPaymentDetail[i].IsActive,
                                                           new { @class = "form-control chkCssSalaryPayment input-sm", data_index = i })
                                                        </td>
                                                        @Html.HiddenFor(x => x.structureSalaryPaymentDetail[i].Code)
                                                        <td>
                                                            @Html.DisplayFor(x => x.structureSalaryPaymentDetail[i].Code)
                                                            @Html.HiddenFor(x => x.structureSalaryPaymentDetail[i].Description)
                                                        </td>
                                                        <td style="width:250px;">
                                                            @Html.DisplayFor(x => x.structureSalaryPaymentDetail[i].Description)
                                                        </td>
                                                        <td>

                                                            @Html.CheckBoxFor(x => x.structureSalaryPaymentDetail[i].IsVariablePay)
                                                           
                                                        </td>
                                                        <td>
                                                            @Html.DropDownListFor(x => x.structureSalaryPaymentDetail[i].ComputationCode,
                                                                 new SelectList(Computation, "Value", "Text", Model.structureSalaryPaymentDetail[i].ComputationCode), "", new { @class = "form-control input-sm", onchange = "calculateTotal()" })
                                                        </td>
                                                        <td>
                                                            @Html.TextBoxFor(x => x.structureSalaryPaymentDetail[i].Amount, new { @class = "form-control input-sm decimalCss", onblur = "validateAmount(this," + i + ")" })
                                                        </td>
                                                        <td>
                                                            @Html.TextBoxFor(x => x.structureSalaryPaymentDetail[i].Total, new { @class = "form-control input-sm decimalCss", @readonly = "readonly" })
                                                        </td>


                                                    </tr>
                                                }

                                            </tbody>
                                            <tfoot>
                                                <tr>
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                    <td style="text-align:right;">Total-A</td>
                                                    <td>@Html.TextBoxFor(x => x.structureHeader.TotalGross, new { @class = "form-control input-sm decimalCss", @readonly = "readonly" })</td>
                                                </tr>
                                            </tfoot>
                                        </table>
                                    </div>

                                </div>
                            </div>
                            <h4><b>EMPLOYER CONTRIBUTION</b></h4>
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="table-responsive">
                                        <table class="table table-condensed table-bordered">
                                            <thead>
                                                <tr>
                                                    <th></th>
                                                    <th>Code</th>
                                                    <th>Description</th>
                                                    <th class="no-wrap">Variable Pay</th>
                                                    <th>Computation</th>
                                                    <th>Amount</th>
                                                    <th>Total</th>
                                                </tr>
                                            </thead>
                                            <tbody>

                                                @for (int i = 0; i < Model.structureEmployerContributionDetail.Count; i++)
                                                {
                                                    @Html.HiddenFor(x => x.structureEmployerContributionDetail[i].PaymentType)
                                                    // @Html.HiddenFor(x => x.structureEmployerContributionDetail[i].RegisterCode)
                                                    @Html.HiddenFor(x => x.structureEmployerContributionDetail[i].StructureDetailID)
                                                    <tr class="trCssEmployerContribution">
                                                        <td>
                                                            @Html.CheckBoxFor(x => x.structureEmployerContributionDetail[i].IsActive,
                                                           new { @class = "form-control chkCssEmployerContribution input-sm", data_index = i })
                                                        </td>
                                                        @Html.HiddenFor(x => x.structureEmployerContributionDetail[i].Code)
                                                        <td>
                                                            @Html.DisplayFor(x => x.structureEmployerContributionDetail[i].Code)
                                                            @Html.HiddenFor(x => x.structureEmployerContributionDetail[i].Description)
                                                        </td>
                                                        <td style="width:250px;">@Html.DisplayFor(x => x.structureEmployerContributionDetail[i].Description)</td>
                                                        <td>
                                                            @Html.CheckBoxFor(x => x.structureEmployerContributionDetail[i].IsVariablePay)
                                                            
                                                        </td>
                                                        <td>
                                                            @Html.DropDownListFor(x => x.structureEmployerContributionDetail[i].ComputationCode,
                                                                 new SelectList(Computation, "Value", "Text", Model.structureEmployerContributionDetail[i].ComputationCode), "", new { @class = "form-control input-sm", onchange = "calculateTotal()" })
                                                        </td>
                                                        <td>
                                                            @Html.TextBoxFor(x => x.structureEmployerContributionDetail[i].Amount, new { @class = "form-control input-sm decimalCss", onblur = "validateTaxAmount(this," + i + ")" })
                                                        </td>
                                                        <td>
                                                            @Html.TextBoxFor(x => x.structureEmployerContributionDetail[i].Total, new { @class = "form-control input-sm decimalCss", @readonly = "readonly" })
                                                        </td>


                                                    </tr>
                                                }

                                            </tbody>
                                            <tfoot>
                                                <tr>
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                    <td style="text-align:right;">Total-B</td>
                                                    <td>@Html.TextBoxFor(x => x.structureHeader.EmpContribution, new { @class = "form-control input-sm decimalCss", @readonly = "readonly" })</td>
                                                </tr>

                                            </tfoot>
                                        </table>
                                    </div>

                                </div>
                            </div>

                            <h4><b>EMPLOYEE CONTRIBUTION</b></h4>
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="table-responsive">
                                        <table class="table table-condensed table-bordered">
                                            <thead>
                                                <tr>
                                                    <th></th>
                                                    <th>Code</th>
                                                    <th>Description</th>
                                                    <th class="no-wrap">Variable Pay</th>
                                                    <th>Computation</th>
                                                    <th>Amount</th>
                                                    <th>Total</th>
                                                </tr>
                                            </thead>
                                            <tbody>

                                                @for (int i = 0; i < Model.structureEmployeeContributionDetail.Count; i++)
                                                {
                                                    @Html.HiddenFor(x => x.structureEmployeeContributionDetail[i].PaymentType)
                                                    // @Html.HiddenFor(x => x.structureEmployeeContributionDetail[i].RegisterCode)
                                                    @Html.HiddenFor(x => x.structureEmployeeContributionDetail[i].StructureDetailID)
                                                    <tr class="trCssEmployeeContribution">
                                                        <td>
                                                            @Html.CheckBoxFor(x => x.structureEmployeeContributionDetail[i].IsActive,
                                                           new { @class = "form-control chkCssEmployeeContribution input-sm", data_index = i })
                                                        </td>
                                                        @Html.HiddenFor(x => x.structureEmployeeContributionDetail[i].Code)
                                                        <td>
                                                            @Html.DisplayFor(x => x.structureEmployeeContributionDetail[i].Code)
                                                            @Html.HiddenFor(x => x.structureEmployeeContributionDetail[i].Description)
                                                        </td>
                                                        <td style="width:250px;">@Html.DisplayFor(x => x.structureEmployeeContributionDetail[i].Description)</td>
                                                        <td>
                                                            @Html.CheckBoxFor(x => x.structureEmployeeContributionDetail[i].IsVariablePay)
                                                        </td>
                                                        <td>
                                                            @Html.DropDownListFor(x => x.structureEmployeeContributionDetail[i].ComputationCode,
                                                                 new SelectList(Computation, "Value", "Text", Model.structureEmployeeContributionDetail[i].ComputationCode), "", new { @class = "form-control input-sm", onchange = "calculateTotal()" })
                                                        </td>
                                                        <td>
                                                            @Html.TextBoxFor(x => x.structureEmployeeContributionDetail[i].Amount, new { @class = "form-control input-sm decimalCss", onblur = "validateDeductAmount(this," + i + ")" })
                                                        </td>
                                                        <td>
                                                            @Html.TextBoxFor(x => x.structureEmployeeContributionDetail[i].Total, new { @class = "form-control input-sm decimalCss", @readonly = "readonly" })
                                                        </td>


                                                    </tr>
                                                }

                                            </tbody>
                                            <tfoot>
                                                <tr>
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                    <td style="text-align:right;">Total-C</td>
                                                    <td>
                                                        @Html.TextBoxFor(x => x.structureHeader.TotalDeductions,
                                                       new { @class = "form-control input-sm decimalCss", @readonly = "readonly" })
                                                    </td>
                                                </tr>

                                            </tfoot>
                                        </table>
                                    </div>

                                    <h4><b>NET SALARY</b></h4>
                                    <div>
                                        <div class="col-md-12">
                                            <div class="table-responsive">
                                                <table class="table table-condensed table-bordered">
                                                    <thead>
                                                        <tr>
                                                            <th></th>
                                                            <th></th>
                                                            <th></th>
                                                            <th></th>
                                                            <th></th>
                                                            <th></th>
                                                            <th>Total</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td></td>
                                                            <td style="text-align:right;">Amount</td>
                                                            <td>
                                                                @Html.TextBoxFor(x => x.structureHeader.NetAmount,
                                                       new { @class = "form-control input-sm", @readonly = "readonly" })
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
                                                    }
    @using (Html.BeginForm("SalaryStructure", "PayRoll", FormMethod.Get, new { id = "frmPayRoll", name = "frmPayRoll" }))
    {
        <input type="hidden" id="BranchId" name="BranchId" />
    }
    <div class="row">
        <div class="col-md-12">
            <button class="btn btn-primary btn-sm" type="button" onclick="SaveStructure()"><i class="fa fa-floppy-o" aria-hidden="true"></i>Save</button>
        </div>
    </div>
</div>
@section Scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.0/js/select2.full.min.js"></script>
    <script type="text/javascript">

        function getContribution(el){
            $('#BranchId').val(el.value);
            $('#frmPayRoll').submit();
        }

        @{
            <text>
        var percentage = '@UTILITY.PERCENTAGE';
        var count= @Model.structureSalaryPaymentDetail.Count +@Model.structureEmployeeContributionDetail.Count +@Model.structureEmployerContributionDetail.Count;
        </text>
        }

        function showHide(){
            for (var index = 1; index <count; index++)
            {
                $('#structureSalaryPaymentDetail_' + index + '__ComputationCode').attr('disabled', 'disabled');
                $('#structureSalaryPaymentDetail_' + index + '__RegisterCode').attr('disabled', 'disabled');
                $('#structureSalaryPaymentDetail_' + index + '__Amount').attr('disabled', 'disabled');
                $('#structureSalaryPaymentDetail_' + index + '__IsVariablePay').attr('disabled','disabled');
               


                $('#structureSalaryPaymentDetail_' + index + '__ComputationCode').attr('disabled', 'disabled');
                $('#structureSalaryPaymentDetail_' + index + '__RegisterCode').attr('disabled', 'disabled');
                $('#structureSalaryPaymentDetail_' + index + '__Amount').attr('disabled', 'disabled');

            }

        }

        $(function () {

            $('#li_PayRollConfig').addClass('open');
            $('#li_SalaryStructureHeaderList').addClass('active');
            showHide();
            var date = new Date();
            $('.dtCss').datetimepicker({
                icons: {
                    time: 'fa fa-clock-o',
                    date: 'fa fa-calendar',
                    up: 'fa fa-arrow-up',
                    down: 'fa fa-arrow-down',
                    previous: 'fa fa-arrow-left',
                    next: 'fa fa-arrow-right',

                },
                format: dateFormat,
                minDate: moment(date)
            });
            $("#structureHeader_EmployeeId").select2().on("change", function (e) {
                $(this).valid()
            });;

            $('#frmSalary').validate({
                rules: {
                    'structureHeader.Code': {
                        required: true
                    },
                    'structureHeader.EffectiveDate': {
                        required: true
                    },
                    'structureHeader.Remarks': {
                        required: true
                    },
                    'structureHeader.Description':{
                        required:true
                    },
                    'structureHeader.EmployeeId':'required'
                },
                highlight: function (element, errorClass, validClass) {
                    var elem = $(element);
                    if (elem.hasClass("select2-hidden-accessible")) {
                        $("#select2-" + elem.attr("id") + "-container").parent().addClass(errorClass);
                    } else {
                        elem.addClass(errorClass);
                    }
                },
                unhighlight: function (element, errorClass, validClass) {
                    var elem = $(element);
                    if (elem.hasClass("select2-hidden-accessible")) {
                        $("#select2-" + elem.attr("id") + "-container").parent().removeClass(errorClass);
                    } else {
                        elem.removeClass(errorClass);
                    }
                },
                errorPlacement: function(error, element) {
                    var elem = $(element);
                    if (elem.hasClass("select2-hidden-accessible")) {
                        element = $("#select2-" + elem.attr("id") + "-container").parent();
                        error.insertAfter(element);
                    } else {
                        error.insertAfter(element);
                    }
                }
            });
            $(".chkCssSalaryPayment").trigger('ifChanged');

            $(".chkCssEmployeeContribution").trigger('ifChanged');
            $('.chkCssEmployerContribution').trigger('ifChanged');

        });

        function SaveStructure() {
            if ($('#frmSalary').valid()){

                if($('#structureSalaryPaymentDetail_0__IsActive').prop('checked')){
                    $.loader({
                        className: "blue-with-image-2",
                        content: '',
                    });
                    $('#frmSalary').submit();
                }
                else
                {
                    swal("Message!", "Please enter values for BASIC component")
                }
            }

        }


        $('.chkCssSalaryPayment').on("ifChanged", function (event) {
            var temp = this;
            var index=$(this).data('index');

            if($('#'+this.id).prop('checked')){

                $('#structureSalaryPaymentDetail_' + index + '__ComputationCode').attr('required','required');
                $('#structureSalaryPaymentDetail_' + index + '__RegisterCode').attr('required','required');
                $('#structureSalaryPaymentDetail_' + index + '__Amount').attr('required','required');


                $('#structureSalaryPaymentDetail_' + index + '__ComputationCode').removeAttr('disabled');
                $('#structureSalaryPaymentDetail_' + index + '__RegisterCode').removeAttr('disabled');
                $('#structureSalaryPaymentDetail_' + index + '__Amount').removeAttr('disabled');
                $('#structureSalaryPaymentDetail_' + index + '__IsVariablePay').removeAttr('disabled');
            }
            else{
                $('#structureSalaryPaymentDetail_' + index + '__ComputationCode').val('').attr('disabled', 'disabled');
                $('#structureSalaryPaymentDetail_' + index + '__RegisterCode').val('').attr('disabled', 'disabled');
                $('#structureSalaryPaymentDetail_' + index + '__Amount').val('').attr('disabled', 'disabled');
                $('#structureSalaryPaymentDetail_' + index + '__IsVariablePay').attr('disabled','disabled');

                $('#structureEmployerContributionDetail_' + index + '__Total').val('');
                $('#structureSalaryPaymentDetail_' + index + '__Total').val('');
                $('#structureSalaryPaymentDetail_' + index + '__ComputationCode').removeAttr('required');
                $('#structureSalaryPaymentDetail_' + index + '__RegisterCode').removeAttr('required');
                $('#structureSalaryPaymentDetail_' + index + '__Amount').removeAttr('required');
                calculateTotal();
            }

        });


        $('.chkCssEmployeeContribution').on("ifChanged", function (event) {
            var temp = this;
            var index=$(this).data('index');

            if($('#'+this.id).prop('checked')){

                $('#structureEmployeeContributionDetail_' + index + '__ComputationCode').attr('required','required');
                $('#structureEmployeeContributionDetail_' + index + '__RegisterCode').attr('required','required');
                $('#structureEmployeeContributionDetail_' + index + '__Amount').attr('required','required');
                $('#structureEmployeeContributionDetail_' + index + '__IsVariablePay').removeAttr('disabled');

                $('#structureEmployeeContributionDetail_' + index + '__ComputationCode').removeAttr('disabled');
                $('#structureEmployeeContributionDetail_' + index + '__RegisterCode').removeAttr('disabled');
                $('#structureEmployeeContributionDetail_' + index + '__Amount').removeAttr('disabled');
                var code=  $('#structureEmployeeContributionDetail_' + index + '__Code').val();
                calculateByEmployeeCode(code,index);
               
            }
            else{

                $('#structureEmployeeContributionDetail_' + index + '__ComputationCode').val('').attr('disabled', 'disabled');
                $('#structureEmployeeContributionDetail_' + index + '__RegisterCode').val('').attr('disabled', 'disabled');
                $('#structureEmployeeContributionDetail_' + index + '__Amount').val('').attr('disabled', 'disabled');
                $('#structureEmployeeContributionDetail_' + index + '__IsVariablePay').attr('disabled','disabled');

                $('#structureEmployeeContributionDetail_' + index + '__Total').val('')
                $('#structureSalaryPaymentDetail_' + index + '__Total').val('')

                $('#structureEmployeeContributionDetail_' + index + '__ComputationCode').removeAttr('required');
                $('#structureEmployeeContributionDetail_' + index + '__RegisterCode').removeAttr('required');
                $('#structureEmployeeContributionDetail_' + index + '__Amount').removeAttr('required');

                calculateTotal();
            }

        });

        function disableEmployeeFields(index){
            //$('#structureEmployeeContributionDetail_' + index + '__ComputationCode').attr('disabled','disabled');
            $('#structureEmployeeContributionDetail_' + index + '__IsVariablePay').attr('readonly','readonly');
            $('#structureEmployeeContributionDetail_' + index + '__Amount').attr('readonly','readonly');

        }


        function calculateByEmployeeCode(code,index){

            if(code=="SSS"){

                //$('#structureEmployeeContributionDetail_' + index + '__ComputationCode').val('AMOUNT');
                //$('#structureEmployeeContributionDetail_' + index + '__ComputationCode').text('AMOUNT');
                var amountVal=582.00;
                $('#structureEmployeeContributionDetail_' + index + '__Amount').val(amountVal);
                $('#structureEmployeeContributionDetail_' + index + '__Total').val(amountVal);
            }
            if(code=="PHIL-HEALTH"){


                //$('#structureEmployeeContributionDetail_' + index + '__ComputationCode').val('AMOUNT');
                //$('#structureEmployeeContributionDetail_' + index + '__ComputationCode').text('AMOUNT');
                $('#structureEmployeeContributionDetail_' + index + '__Amount').attr('disabled','disabled');


                var basicSalary=   parseFloat($('#structureSalaryPaymentDetail_0__Total').val());
                if(basicSalary<40000){
                    var total=parseFloat((basicSalary/100)*1.375).toFixed(2);
                    $('#structureEmployeeContributionDetail_' + index + '__Amount').val(total);
                    $('#structureEmployeeContributionDetail_' + index + '__Total').val(total);
                }
                else{
                    var amountVal=550.00;
                    $('#structureEmployeeContributionDetail_' + index + '__Amount').val(amountVal);
                    $('#structureEmployeeContributionDetail_' + index + '__Total').val(amountVal);
                }

            }
            if(code=="PAG-IBIG"){

                // $('#structureEmployeeContributionDetail_' + index + '__ComputationCode').val('AMOUNT');
                //$('#structureEmployeeContributionDetail_' + index + '__ComputationCode').text('AMOUNT');
                var amountVal=100.00
                $('#structureEmployeeContributionDetail_' + index + '__Amount').val(amountVal);
                $('#structureEmployeeContributionDetail_' + index + '__Total').val(amountVal);
            }
            disableEmployeeFields(index);
            var obj={};
            validateDeductAmount(obj,0,code);
            validateTaxAmount(obj,0,code);
        }



        $('.chkCssEmployerContribution').on("ifChanged", function (event) {
            var temp = this;
            var index=$(this).data('index');

            if($('#'+this.id).prop('checked')){

                $('#structureEmployerContributionDetail_' + index + '__ComputationCode').attr('required','required');
                $('#structureEmployerContributionDetail_' + index + '__IsVariablePay').attr('required','required');
                $('#structureEmployerContributionDetail_' + index + '__Amount').attr('required','required');

                $('#structureEmployerContributionDetail_' + index + '__ComputationCode').removeAttr('disabled');
                $('#structureEmployerContributionDetail_' + index + '__IsVariablePay').removeAttr('disabled');
                $('#structureEmployerContributionDetail_' + index + '__Amount').removeAttr('disabled');
                var code=  $('#structureEmployerContributionDetail_' + index + '__Code').val();
                calculateByEmpoyerCode(code,index);
            }
            else{

                $('#structureEmployerContributionDetail_' + index + '__ComputationCode').val('').attr('disabled', 'disabled');
                $('#structureEmployerContributionDetail_' + index + '__IsVariablePay').val('').attr('disabled', 'disabled');
                $('#structureEmployerContributionDetail_' + index + '__Amount').val('').attr('disabled', 'disabled');

                $('#structureEmployerContributionDetail_' + index + '__Total').val('')
                $('#structureSalaryPaymentDetail_' + index + '__Total').val('')

                $('#structureEmployerContributionDetail_' + index + '__ComputationCode').removeAttr('required');
                $('#structureEmployerContributionDetail_' + index + '__IsVariablePay').removeAttr('required');
                $('#structureEmployerContributionDetail_' + index + '__Amount').removeAttr('required');

                calculateTotal();
            }

        });

        function disableFields(index){
            //$('#structureEmployerContributionDetail_' + index + '__ComputationCode').attr('disabled','disabled');
            $('#structureEmployerContributionDetail_' + index + '__IsVariablePay').attr('readonly','readonly');
            $('#structureEmployerContributionDetail_' + index + '__Amount').attr('readonly','readonly');

        }


        function calculateByEmpoyerCode(code,index){

            if(code=="SSS"){

                //$('#structureEmployerContributionDetail_' + index + '__ComputationCode').val('AMOUNT');
                //$('#structureEmployerContributionDetail_' + index + '__ComputationCode').text('AMOUNT');
                var amountVal=1178.00;
                $('#structureEmployerContributionDetail_' + index + '__Amount').val(amountVal);
                $('#structureEmployerContributionDetail_' + index + '__Total').val(amountVal);

                disableFields(index);
            }
            if(code=="PHIL-HEALTH"){

                //$('#structureEmployerContributionDetail_' + index + '__ComputationCode').val('AMOUNT');
                //$('#structureEmployerContributionDetail_' + index + '__ComputationCode').text('AMOUNT');
                $('#structureEmployerContributionDetail_' + index + '__Amount').attr('disabled','disabled');


                var basicSalary=   parseFloat($('#structureSalaryPaymentDetail_0__Total').val());
                if(basicSalary<40000){
                    var total=parseFloat((basicSalary/100)*1.375).toFixed(2);
                    $('#structureEmployerContributionDetail_' + index + '__Amount').val(total);
                    $('#structureEmployerContributionDetail_' + index + '__Total').val(total);
                }
                else{
                    var amountVal=550.00;
                    $('#structureEmployerContributionDetail_' + index + '__Amount').val(amountVal);
                    $('#structureEmployerContributionDetail_' + index + '__Total').val(amountVal);
                }
                disableFields(index);
            }
            if(code=="PAG-IBIG"){

                //$('#structureEmployerContributionDetail_' + index + '__ComputationCode').val('AMOUNT');
                // $('#structureEmployerContributionDetail_' + index + '__ComputationCode').text('AMOUNT');
                var amountVal=100.00;
                $('#structureEmployerContributionDetail_' + index + '__Amount').val(amountVal);
                $('#structureEmployerContributionDetail_' + index + '__Total').val(amountVal);
                disableFields(index);
            }
            var obj={};
            validateDeductAmount(obj,0,code);
            validateTaxAmount(obj,0,code);
        }



        /* calculation */

        function calculateTotalByCode(obj){
            var code=     $('#'+obj.id).val();
            calculateTotal(code);
        }


        function calculateTotal(code){
            var obj={};
            validateAmount(obj,0,code);
            validateDeductAmount(obj,0,code);
            validateTaxAmount(obj,0,code);
        }
        function validateAmount(el, index,code) {

            code= $('#structureSalaryPaymentDetail_'+index+'__RegisterCode').val();
            var rowCount=$('.trCssSalaryPayment').length;
            var TotalGross=0;

            for(var i=0; i<rowCount;i++){
                code= $('#structureSalaryPaymentDetail_'+i+'__RegisterCode').val();
                var basicAmount=$('#structureSalaryPaymentDetail_' + 0 + '__Amount').val();

                if(index == 0 && basicAmount!=""){
                    basicAmount =parseFloat(basicAmount).toFixed(2);
                    $('#structureSalaryPaymentDetail_' + 0 + '__Total').val(basicAmount);
                }

                if(!$('#structureSalaryPaymentDetail_' + i + '__IsActive').prop('checked'))
                    continue;

                var total = $('#structureSalaryPaymentDetail_' + i + '__Amount').val();
                if(total!="")
                    total=parseFloat(total).toFixed(2);
                var ComputationCode = $('#structureSalaryPaymentDetail_' + i + '__ComputationCode').val();
                if (ComputationCode == percentage) {

                    if(total>100){
                        $('#structureSalaryPaymentDetail_' + i + '__Amount').val('');
                        swal({
                            title: "Alert!",
                            text: "Percentage value should be less than 100",
                            type: "warning"
                        });
                        return;
                    }
                    var grandTotal=(basicAmount* total)/100;
                    grandTotal=parseFloat(grandTotal).toFixed(2);
                    if(code =="EMPLOYEE DEDUCTION"){
                        grandTotal= 0 - grandTotal
                        $('#structureSalaryPaymentDetail_' + i + '__Total').val(grandTotal);
                    }
                    else
                        $('#structureSalaryPaymentDetail_' + i + '__Total').val(grandTotal);
                }
                else{
                    if(code =="EMPLOYEE DEDUCTION"){
                        total=0-total;
                        $('#structureSalaryPaymentDetail_' + i + '__Total').val(total);
                    }
                    else
                        $('#structureSalaryPaymentDetail_' + i + '__Total').val(total);
                }

                /* Calculate Nett amount*/
                var currentValue=$('#structureSalaryPaymentDetail_' + i + '__Total').val();
                if(currentValue!="" && currentValue!=null){
                    if(code !="EMPLOYEE DEDUCTION")
                        TotalGross = parseFloat(TotalGross)+ parseFloat(currentValue);
                    else{
                        if(TotalGross!=0)
                            TotalGross = parseFloat(TotalGross) + parseFloat(currentValue);
                        else
                            TotalGross =parseFloat(currentValue);
                    }
                    TotalGross=TotalGross.toFixed(2);
                    $('#structureHeader_TotalGross').val(TotalGross);

                }

                var _totalGross= $('#structureHeader_TotalGross').val() == "" ? 0 :  $('#structureHeader_TotalGross').val();
                var _totalDeductions= $('#structureHeader_TotalDeductions').val()== "" ? 0 : $('#structureHeader_TotalDeductions').val();

                var netAmount=parseFloat(_totalGross) - parseFloat(_totalDeductions);
                $('#structureHeader_NetAmount').val(netAmount.toFixed(2));

            }
            validateDeductAmount(this, 0,code);

        }

        function validateDeductAmount(el, index,code){

            var rowCount=$('.trCssEmployeeContribution').length;
            var netAmount=0;
            for(var i=0; i<rowCount;i++){

                code=$('#structureEmployeeContributionDetail_'+i+'__RegisterCode').val();

                var basicAmount=$('#structureSalaryPaymentDetail_' + 0 + '__Amount').val();
                if(index == 0 && basicAmount!=""){
                    basicAmount =parseFloat(basicAmount).toFixed(2);
                    $('#structureSalaryPaymentDetail_' + 0 + '__Total').val(basicAmount);
                }

                var total = $('#structureEmployeeContributionDetail_' + i + '__Amount').val();
                if(total!="")
                    total=parseFloat(total).toFixed(2);
                var ComputationCode = $('#structureEmployeeContributionDetail_' + i + '__ComputationCode').val();
                if (ComputationCode == percentage) {

                    if(total>100){
                        $('#structureEmployeeContributionDetail_' + i + '__Amount').val('');
                        swal({
                            title: "Alert!",
                            text: "Percentage value should be less than 100",
                            type: "warning"
                        });
                        return;
                    }
                    var grandTotal=(basicAmount* total)/100;
                    grandTotal=parseFloat(grandTotal).toFixed(2);
                    $('#structureEmployeeContributionDetail_' + i + '__Total').val(grandTotal);
                }else{
                    $('#structureEmployeeContributionDetail_' + i + '__Total').val(total);
                }

                /* Calculate Nett amount*/
                var currentValue=$('#structureEmployeeContributionDetail_' + i + '__Total').val() == "" ? 0 :$('#structureEmployeeContributionDetail_' + i + '__Total').val();

                if(code !="EMPLOYEE DEDUCTION")
                    netAmount = parseFloat(netAmount)+ parseFloat(currentValue);
                else
                {
                    netAmount = parseFloat(netAmount) - parseFloat(currentValue);
                    var currentVal=  $('#structureEmployeeContributionDetail_' + i + '__Total').val();
                    if(currentVal!="" && currentVal !=null && currentVal>0)
                        currentValue =0- parseFloat(currentValue).toFixed(2);
                    $('#structureEmployeeContributionDetail_' + i + '__Total').val(currentValue);
                }

                netAmount=netAmount.toFixed(2);
                $('#structureHeader_TotalDeductions').val(netAmount);

            }
            var _totalGross= $('#structureHeader_TotalGross').val() == "" ? 0 :  $('#structureHeader_TotalGross').val();
            var _totalDeductions= $('#structureHeader_TotalDeductions').val()== "" ? 0 : $('#structureHeader_TotalDeductions').val();

            var netAmount=parseFloat(_totalGross) - parseFloat(_totalDeductions);
            $('#structureHeader_NetAmount').val(netAmount.toFixed(2));

        }

        function validateTaxAmount(obj,index,code){
            var rowCount=$('.trCssEmployerContribution').length;
            var netAmount=0;

            for(var i=0; i<rowCount;i++){

                code=$('#structureEmployerContributionDetail_'+i+'__RegisterCode').val();

                var totalGross=$('#structureHeader_TotalGross').val();
                if(index == 0 && totalGross!=""){
                    totalGross =parseFloat(totalGross).toFixed(2);
                    //$('#structureEmployerContributionDetail_' + 0 + '__Total').val(totalGross);
                }

                var total = $('#structureEmployerContributionDetail_' + i + '__Amount').val();
                if(total!="")
                    total=parseFloat(total).toFixed(2);
                var ComputationCode = $('#structureEmployerContributionDetail_' + i + '__ComputationCode').val();
                if (ComputationCode == percentage) {

                    if(total>100){
                        $('#structureEmployerContributionDetail_' + i + '__Amount').val('');
                        swal({
                            title: "Alert!",
                            text: "Percentage value should be less than 100",
                            type: "warning"
                        });
                        return;
                    }
                    var grandTotal=(totalGross* total)/100;
                    grandTotal=parseFloat(grandTotal).toFixed(2);
                    $('#structureEmployerContributionDetail_' + i + '__Total').val(grandTotal);
                }else{
                    $('#structureEmployerContributionDetail_' + i + '__Total').val(total);
                }

                /* Calculate Nett amount*/
                var currentValue=$('#structureEmployerContributionDetail_' + i + '__Total').val() == "" ? 0 :$('#structureEmployerContributionDetail_' + i + '__Total').val();

                if(code !="EMPLOYEE DEDUCTION")
                    netAmount = parseFloat(netAmount)+ parseFloat(currentValue);
                else
                {
                    netAmount = parseFloat(netAmount) - parseFloat(currentValue);
                    var currentVal=  $('#structureEmployerContributionDetail_' + i + '__Total').val();
                    if(currentVal!="" && currentVal !=null && currentVal>0)
                        currentValue =0- parseFloat(currentValue).toFixed(2);
                    $('#structureEmployerContributionDetail_' + i + '__Total').val(currentValue);
                }

                netAmount=netAmount.toFixed(2);
                $('#structureHeader_EmpContribution').val(netAmount);

            }
        }
    </script>
}