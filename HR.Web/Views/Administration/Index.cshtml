@model List<HR.Web.Controllers.AdministrationController.AuthorViewModel>
   


    <div class="panel panel-primary">
        <div class="panel-heading panel-head">Author Book Tree View</div>
        <div id="frm-author" class="panel-body">
            @using (Html.BeginForm())
            {

                <div class="tree">
                    @for (int i = 0; i < Model.Count(); i++)
                    {

                        <ul>
                            <li>
                                <a href="#">
                                    @*@Html.CheckBoxFor(model => model[i]., new { @class = "tree-checkbox parent", @id = @Model[i].Id })*@

                                    <label for=@i>
                                        <strong>Author:</strong>
                                        @Html.DisplayFor(model => model[i].Name)

                                    </label>
                                </a>
                                <ul>
                                    @for (int j = 0; j < Model[i].BookViewModel.Count(); j++)
                                    {
                                        int k = 1 + j;
                                        @Html.HiddenFor(model => model[i].BookViewModel[j].Id)

                                        <li>
                                            <a href="#">
                                                @Html.CheckBoxFor(model => model[i].BookViewModel[j].IsWritten, new { @class = "tree-checkbox node-item", @iid = i + "" + j })

                                                <label for=@i@j>
                                                    <strong>Book @(k):</strong> @Html.DisplayFor(model => model[i].BookViewModel[j].Title)
                                                </label>
                                            </a>
                                        </li>

                                    }

                                </ul>
                            </li>
                        </ul>
                    }

                </div>
                <div class="form-group">
                    <div class="col-lg-9"></div>
                    <div class="col-lg-3">
                        <button class="btn btn-success" id="btnSubmit" type="submit">
                            Submit
                        </button>
                    </div>
                </div>
            }

        </div>
    </div>
    <style>
        .tree li {
            margin: 0px 0;
            list-style-type: none;
            position: relative;
            padding: 20px 5px 0px 5px;
        }

            .tree li::before {
                content: '';
                position: absolute;
                top: 0;
                width: 1px;
                height: 100%;
                right: auto;
                left: -20px;
                border-left: 1px solid #ccc;
                bottom: 50px;
            }

            .tree li::after {
                content: '';
                position: absolute;
                top: 30px;
                width: 25px;
                height: 20px;
                right: auto;
                left: -20px;
                border-top: 1px solid #ccc;
            }

            .tree li a {
                display: inline-block;
                border: 1px solid #ccc;
                padding: 5px 10px;
                text-decoration: none;
                color: #666;
                font-family: 'Open Sans',sans-serif;
                font-size: 14px;
                font-weight: 600;
                border-radius: 5px;
                -webkit-border-radius: 5px;
                -moz-border-radius: 5px;
            }

        /*Remove connectors before root*/
        .tree > ul > li::before, .tree > ul > li::after {
            border: 0;
        }
        /*Remove connectors after last child*/
        .tree li:last-child::before {
            height: 30px;
        }

        /*Time for some hover effects*/
        /*We will apply the hover effect the the lineage of the element also*/
        .tree li a:hover, .tree li a:hover + ul li a {
            background: #dd4814;
            color: #ffffff;
            border: 1px solid #dd4814;
        }
            /*Connector styles on hover*/
            .tree li a:hover + ul li::after,
            .tree li a:hover + ul li::before,
            .tree li a:hover + ul::before,
            .tree li a:hover + ul ul::before {
                border-color: #dd4814;
            }

        .tree-checkbox {
            margin: 4px !important;
        }


        .tree:before {
            border-left: 1px solid #ccc;
            bottom: 16px;
            content: "";
            display: block;
            left: 0;
            position: absolute;
            top: -21px;
            width: 1px;
            z-index: 1;
        }

        .tree ul:after {
            border-top: 1px solid #ccc;
            content: "";
            height: 20px;
            left: -29px;
            position: absolute;
            right: auto;
            top: 37px;
            width: 34px;
        }

        *:before, *:after {
            box-sizing: border-box;
        }

        *:before, *:after {
            box-sizing: border-box;
        }

        .tree {
            overflow: auto;
            padding-left: 0px;
            position: relative;
        }
    </style>
    <script type="text/javascript">
        function Tree() {
            var $this = this;

            function treeNodeClick() {
                $(document).on('click', '.tree li a input[type="checkbox"]', function () {
                    $(this).closest('li').find('ul input[type="checkbox"]').prop('checked', $(this).is(':checked'));
                }).on('click', '.node-item', function () {
                    var parentNode = $(this).parents('.tree ul');
                    if ($(this).is(':checked')) {
                        parentNode.find('li a .parent').prop('checked', true);
                    } else {
                        var elements = parentNode.find('ul input[type="checkbox"]:checked');
                        if (elements.length == 0) {
                            parentNode.find('li a .parent').prop('checked', false);
                        }
                    }
                });
            };

            $this.init = function () {
                treeNodeClick();
            }
        }
        $(function () {
            var self = new Tree();
            self.init();
        })
    </script>
